import 'dart:io';
import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:delivery/pages/Rider/R_home.dart';
import 'package:flutter/material.dart';
import 'package:get/get.dart';
import 'package:geolocator/geolocator.dart';
import 'package:flutter_map/flutter_map.dart';
import 'package:image_picker/image_picker.dart';
import 'package:latlong2/latlong.dart';
import 'package:supabase_flutter/supabase_flutter.dart';

class RTrackPage extends StatefulWidget {
  final String orderId;

  const RTrackPage({super.key, required this.orderId});

  @override
  State<RTrackPage> createState() => _RTrackPageState();
}

class _RTrackPageState extends State<RTrackPage> {
  File? statusImage;
  bool isLoading = false;
  final MapController mapController = MapController();
  Position? currentPosition;
  DateTime? _lastUpdateTime;
  int currentStatus = 1; // ‚úÖ ‡πÄ‡∏Å‡πá‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô

  @override
  void initState() {
    super.initState();
    _trackLocationRealtime();
  }

  // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏õ‡∏∏‡πà‡∏° Back (‡∏à‡∏ô‡∏Å‡∏ß‡πà‡∏≤‡∏à‡∏∞‡∏™‡πà‡∏á‡∏Ç‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à)
  Future<bool> _onWillPop() async {
    if (currentStatus < 4) {
      Get.snackbar(
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏≠‡∏Å‡πÑ‡∏î‡πâ",
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏´‡∏ô‡πâ‡∏≤‡∏ô‡∏µ‡πâ",
        backgroundColor: Colors.orange,
        colorText: Colors.white,
      );
      return false; // üö´ ‡πÑ‡∏°‡πà‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÉ‡∏´‡πâ‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö
    }
    return true; // ‚úÖ ‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à
  }

  // ‚úÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏à‡∏≤‡∏Å‡∏Å‡∏•‡πâ‡∏≠‡∏á
  Future<void> _pickImage() async {
    final picker = ImagePicker();
    final picked = await picker.pickImage(source: ImageSource.camera);
    if (picked != null) {
      setState(() {
        statusImage = File(picked.path);
      });
    }
  }

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡πÑ‡∏õ Supabase
  Future<String?> _uploadImage(File file, String folder) async {
    try {
      final fileName = "${folder}_${DateTime.now().millisecondsSinceEpoch}.jpg";
      await Supabase.instance.client.storage
          .from('order-status')
          .upload(fileName, file);

      return Supabase.instance.client.storage
          .from('order-status')
          .getPublicUrl(fileName);
    } catch (e) {
      Get.snackbar(
        "‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß",
        e.toString(),
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      return null;
    }
  }

  // ‚úÖ ‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÅ‡∏ö‡∏ö‡πÄ‡∏£‡∏µ‡∏¢‡∏•‡πÑ‡∏ó‡∏°‡πå
  Future<void> _trackLocationRealtime() async {
    bool serviceEnabled = await Geolocator.isLocationServiceEnabled();
    if (!serviceEnabled) {
      Get.snackbar(
        "‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏õ‡∏¥‡∏î‡∏≠‡∏¢‡∏π‡πà",
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏õ‡∏¥‡∏î GPS ‡∏Å‡πà‡∏≠‡∏ô‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô",
        backgroundColor: Colors.orange,
        colorText: Colors.white,
      );
      return;
    }

    LocationPermission permission = await Geolocator.requestPermission();
    if (permission == LocationPermission.denied ||
        permission == LocationPermission.deniedForever) {
      Get.snackbar(
        "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡πå‡πÄ‡∏Ç‡πâ‡∏≤‡∏ñ‡∏∂‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á",
        "‡πÇ‡∏õ‡∏£‡∏î‡∏≠‡∏ô‡∏∏‡∏ç‡∏≤‡∏ï‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÉ‡∏´‡πâ‡πÅ‡∏≠‡∏õ",
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
      return;
    }

    Geolocator.getPositionStream(
      locationSettings: const LocationSettings(
        accuracy: LocationAccuracy.high,
        distanceFilter: 10,
      ),
    ).listen((Position position) {
      final now = DateTime.now();
      if (_lastUpdateTime == null ||
          now.difference(_lastUpdateTime!).inSeconds >= 5) {
        _lastUpdateTime = now;
        currentPosition = position;

        FirebaseFirestore.instance
            .collection("orders")
            .doc(widget.orderId)
            .update({
              "rider_location": {
                "lat": position.latitude,
                "lng": position.longitude,
              },
            });

        mapController.move(
          LatLng(position.latitude, position.longitude),
          mapController.camera.zoom,
        );
      }
    });
  }

  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
  // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Å‡∏≤‡∏£‡∏à‡∏±‡∏î‡∏™‡πà‡∏á
  Future<void> _updateStatus(Map<String, dynamic> data) async {
    if (isLoading) return;

    // ‚úÖ ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÉ‡∏´‡πâ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
    if (statusImage == null) {
      Get.snackbar(
        "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏Å‡πà‡∏≠‡∏ô",
        "‡∏ï‡πâ‡∏≠‡∏á‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏ñ‡∏±‡∏î‡πÑ‡∏õ",
        backgroundColor: Colors.orange,
        colorText: Colors.white,
      );
      return;
    }

    setState(() => isLoading = true);

    try {
      final docRef = FirebaseFirestore.instance
          .collection("orders")
          .doc(widget.orderId);

      int status = data["status"] ?? 2;
      int newStatus = status + 1;
      String? imageUrl;

      // ‚úÖ ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡∏£‡∏π‡∏õ‡∏Å‡πà‡∏≠‡∏ô‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
      if (statusImage != null) {
        imageUrl = await _uploadImage(statusImage!, "status$newStatus");
      }

      final updateData = {"status": newStatus, "updatedAt": Timestamp.now()};
      if (imageUrl != null) {
        updateData["image_url_status$newStatus"] = imageUrl;
      }

      await docRef.update(updateData);

      String message = switch (newStatus) {
        2 => "‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á...",
        3 => "‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡πÅ‡∏•‡πâ‡∏ß ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏±‡∏î‡∏™‡πà‡∏á‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö...",
        4 => "‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß! üéâ",
        _ => "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢",
      };

      Get.snackbar(
        "‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à",
        message,
        backgroundColor: Colors.green,
        colorText: Colors.white,
      );

      if (newStatus >= 4) {
        await Future.delayed(const Duration(seconds: 1));
        Get.offAll(() => const RHomePage());
      }

      setState(() {
        currentStatus = newStatus;
        statusImage = null;
        isLoading = false;
      });
    } catch (e) {
      setState(() => isLoading = false);
      Get.snackbar(
        "‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î",
        "‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ: $e",
        backgroundColor: Colors.red,
        colorText: Colors.white,
      );
    }
  }

  @override
  Widget build(BuildContext context) {
    return WillPopScope(
      onWillPop: _onWillPop, // üö´ ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏° Back
      child: Scaffold(
        backgroundColor: const Color(0xFF7DE1A4),
        appBar: AppBar(
          automaticallyImplyLeading: false, // üö´ ‡∏õ‡∏¥‡∏î‡∏õ‡∏∏‡πà‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏Å‡∏•‡∏±‡∏ö‡∏ö‡∏ô AppBar
          backgroundColor: const Color(0xFF7DE1A4),
          elevation: 0,
          title: const Text(
            "‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏™‡πà‡∏á",
            style: TextStyle(
              fontSize: 20,
              fontWeight: FontWeight.bold,
              color: Colors.white,
            ),
          ),
          centerTitle: true,
        ),
        body: StreamBuilder<DocumentSnapshot>(
          stream: FirebaseFirestore.instance
              .collection("orders")
              .doc(widget.orderId)
              .snapshots(),
          builder: (context, snapshot) {
            if (!snapshot.hasData || !snapshot.data!.exists) {
              return const Center(child: Text("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ô‡∏µ‡πâ"));
            }

            final data = snapshot.data!.data() as Map<String, dynamic>;
            currentStatus = data["status"] ?? 1;

            final status = currentStatus;
            final targetLat = status == 2
                ? (data["sender_lat"] ?? 0).toDouble()
                : (data["receiver_lat"] ?? 0).toDouble();
            final targetLng = status == 2
                ? (data["sender_lng"] ?? 0).toDouble()
                : (data["receiver_lng"] ?? 0).toDouble();
            final targetName = status == 2
                ? data["sender_name"] ?? "-"
                : data["receiver_name"];
            final targetAddress = status == 2
                ? data["sender_address"] ?? "-"
                : data["receiver_address"];

            LatLng targetPosition = LatLng(targetLat, targetLng);
            final riderLoc = data["rider_location"];
            LatLng riderPosition = riderLoc != null
                ? LatLng(riderLoc["lat"], riderLoc["lng"])
                : LatLng(13.736717, 100.523186);

            String statusText = switch (status) {
              1 => "[1] ‡∏£‡∏≠‡πÑ‡∏£‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏°‡∏≤‡∏£‡∏±‡∏ö‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤",
              2 => "[2] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á‡πÑ‡∏õ‡∏£‡∏±‡∏ö‡∏Ç‡∏≠‡∏á‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á",
              3 => "[3] ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ô‡∏≥‡∏™‡πà‡∏á‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡πÉ‡∏´‡πâ‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö",
              4 => "[4] ‡∏™‡πà‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß",
              _ => "‡πÑ‡∏°‡πà‡∏ó‡∏£‡∏≤‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
            };

            return Column(
              children: [
                // ‚úÖ ‡πÅ‡∏ú‡∏ô‡∏ó‡∏µ‡πà
                Expanded(
                  child: FlutterMap(
                    mapController: mapController,
                    options: MapOptions(
                      initialCenter: riderPosition,
                      initialZoom: 14,
                    ),
                    children: [
                      TileLayer(
                        urlTemplate:
                            'https://tile.thunderforest.com/atlas/{z}/{x}/{y}.png?apikey=08c89dd3f9ae427b904737c50b61cb53',
                        userAgentPackageName: 'net.delivery.app',
                      ),
                      MarkerLayer(
                        markers: [
                          Marker(
                            point: riderPosition,
                            child: const Icon(
                              Icons.delivery_dining,
                              color: Colors.blue,
                              size: 40,
                            ),
                          ),
                          Marker(
                            point: targetPosition,
                            child: const Icon(
                              Icons.location_on,
                              color: Colors.red,
                              size: 40,
                            ),
                          ),
                        ],
                      ),
                    ],
                  ),
                ),

                // ‚úÖ ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á + ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï
                Container(
                  color: Colors.white,
                  padding: const EdgeInsets.all(16),
                  child: Column(
                    crossAxisAlignment: CrossAxisAlignment.start,
                    children: [
                      // üè† ‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á
                      const Text(
                        "‡∏ï‡πâ‡∏ô‡∏ó‡∏≤‡∏á (‡∏ú‡∏π‡πâ‡∏™‡πà‡∏á):",
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      Text("‡∏ä‡∏∑‡πà‡∏≠: ${data["sender_name"] ?? "-"}"),
                      Text("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${data["sender_phone"] ?? "-"}"),
                      const SizedBox(height: 12),

                      // üéØ ‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö
                      const Text(
                        "‡∏õ‡∏•‡∏≤‡∏¢‡∏ó‡∏≤‡∏á (‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö):",
                        style: TextStyle(
                          fontWeight: FontWeight.bold,
                          fontSize: 16,
                        ),
                      ),
                      Text("‡∏ä‡∏∑‡πà‡∏≠: ${data["receiver_name"] ?? "-"}"),
                      Text("‡πÄ‡∏ö‡∏≠‡∏£‡πå‡πÇ‡∏ó‡∏£: ${data["receiver_phone"] ?? "-"}"),
                      const SizedBox(height: 8),

                      Text(
                        statusText,
                        style: const TextStyle(
                          color: Colors.blue,
                          fontWeight: FontWeight.w500,
                        ),
                      ),
                      const SizedBox(height: 10),

                      // üì∑ ‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                      GestureDetector(
                        onTap: _pickImage,
                        child: Container(
                          height: 120,
                          width: double.infinity,
                          decoration: BoxDecoration(
                            color: Colors.grey[200],
                            borderRadius: BorderRadius.circular(10),
                            border: Border.all(color: Colors.grey.shade400),
                          ),
                          child: statusImage == null
                              ? const Center(
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Icon(
                                        Icons.camera_alt,
                                        size: 40,
                                        color: Colors.grey,
                                      ),
                                      SizedBox(height: 8),
                                      Text("‡πÅ‡∏ï‡∏∞‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ñ‡πà‡∏≤‡∏¢‡∏†‡∏≤‡∏û‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞"),
                                    ],
                                  ),
                                )
                              : ClipRRect(
                                  borderRadius: BorderRadius.circular(10),
                                  child: Image.file(
                                    statusImage!,
                                    fit: BoxFit.cover,
                                    width: double.infinity,
                                  ),
                                ),
                        ),
                      ),
                      const SizedBox(height: 12),

                      // üîò ‡∏õ‡∏∏‡πà‡∏°‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞
                      SizedBox(
                        width: double.infinity,
                        child: ElevatedButton(
                          style: ElevatedButton.styleFrom(
                            backgroundColor: status >= 4
                                ? Colors.grey
                                : Colors.blue,
                            padding: const EdgeInsets.symmetric(vertical: 14),
                            shape: RoundedRectangleBorder(
                              borderRadius: BorderRadius.circular(8),
                            ),
                          ),
                          onPressed: status >= 4
                              ? null
                              : () => _updateStatus(data),
                          child: isLoading
                              ? const CircularProgressIndicator(
                                  color: Colors.white,
                                  strokeWidth: 2,
                                )
                              : const Text(
                                  "‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞",
                                  style: TextStyle(color: Colors.white),
                                ),
                        ),
                      ),
                    ],
                  ),
                ),
              ],
            );
          },
        ),
      ),
    );
  }
}
